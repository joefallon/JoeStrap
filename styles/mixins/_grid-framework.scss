// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@import "../modules/variables";

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin jtf-make-grid-columns($i: 1, $list: ".xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}, .xl-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}, .xl-#{$i}";
    }

    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left:  ceil(calc($grid-gutter-width / 2));
        padding-right: floor(calc($grid-gutter-width / 2));
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin jtf-float-grid-columns($class, $i: 1, $list: ".#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .#{$class}-#{$i}";
    }

    #{$list} {
        float: left;
    }
}

@mixin jtf-calc-grid-column($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
        .#{$class}-#{$index} {
            width: percentage(calc($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index > 0) {
        .#{$class}-push-#{$index} {
            left: percentage(calc($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index == 0) {
        .#{$class}-push-0 {
            left: auto;
        }
    }

    @if ($type == pull) and ($index > 0) {
        .#{$class}-pull-#{$index} {
            right: percentage(calc($index / $grid-columns));
        }
    }

    @if ($type == pull) and ($index == 0) {
        .#{$class}-pull-0 {
            right: auto;
        }
    }

    @if ($type == offset) {
        .#{$class}-offset-#{$index} {
            margin-left: percentage(calc($index / $grid-columns));
        }
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin jtf-loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include jtf-calc-grid-column($i, $class, $type);
    }
}

// Create grid for specific class
@mixin jtf-make-grid($class) {
    @include jtf-float-grid-columns($class);
    @include jtf-loop-grid-columns($grid-columns, $class, width);
    @include jtf-loop-grid-columns($grid-columns, $class, pull);
    @include jtf-loop-grid-columns($grid-columns, $class, push);
    @include jtf-loop-grid-columns($grid-columns, $class, offset);
}
