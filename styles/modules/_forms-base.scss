/* _forms-base.scss */
@import "variables";
@import "../mixins/tab-focus";
@import "../mixins/vendor-prefixes";

fieldset {
    padding: 0;
    margin:  0;
    border:  0;
    // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    // See https://github.com/twbs/bootstrap/issues/12359.
    min-width: 0;
}

legend {
    display:       block;
    width:         100%;
    padding:       0;
    margin-bottom: $line-height-base;
    font-size:     ($font-size-base * 1.5);
    line-height:   inherit;
    color:         $grey-darken-4;
    border:        0;
    border-bottom: 1px solid $grey-lighten-2;
}

label {
    display:       inline-block;
    max-width:     100%;
    margin-bottom: 5px;
    font-weight:   bold;
}

input[type="search"] {
    box-sizing: border-box;
}

// Position radios and checkboxes better
input[type="radio"], input[type="checkbox"] {
    margin: 4px 0 0 0;
    line-height: normal;
}

input[type="file"] {
    display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
    display: block;
    width:   100%;
}

// Make multiple select elements height not fixed
select[multiple], select[size] {
    height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus, input[type="radio"]:focus, input[type="checkbox"]:focus {
    @include jtf-tab-focus;
}

// Adjust output element
output {
    display: block;
    padding-top: ($padding-base-vertical + 1);
    font-size: $font-size-base;
    line-height: $line-height-base;
    color: $grey-darken-3;
}

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
.form-control {
    display: block;
    width: 100%;
    height: $input-height-base;
    padding: $padding-base-vertical $padding-base-horizontal;
    font-size: $font-size-base;
    line-height: $line-height-base;
    color: $grey-darken-3;
    background: $white none;
    border: 1px solid $grey-lighten-1;
    border-radius: $input-border-radius;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
    transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;

    // Customize the `:focus` state to imitate native WebKit styles.
    //@include jtf-form-control-focus;
    $color-rgba: rgba(red($light-blue), green($light-blue), blue($light-blue), .6);

    &:focus {
        border-color: $light-blue;
        outline: 0;
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px $color-rgba;
    }

    // Placeholder Text
    @include jtf-placeholder;

    // Remove the style on the caret on `<select>`s in IE10+.
    &::-ms-expand {
        border: 0;
        background-color: transparent;
    }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled], &[readonly], fieldset[disabled] & {
        background-color: $grey-lighten-3;
        opacity: 1;
    }

    &[disabled], fieldset[disabled] & {
        cursor: $cursor-disabled;
    }
}

// Reset height for `textarea`s
textarea.form-control {
    height: auto;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.
input[type="search"] {
    -webkit-appearance: none;
}

// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 9.3, iOS doesn't support `week`.
@media screen and (-webkit-min-device-pixel-ratio: 0) {
    input[type="date"], input[type="time"], input[type="datetime-local"], input[type="month"] {
        &.form-control {
            line-height: $input-height-base;
        }
    }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
    margin-bottom: $form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio, .checkbox {
    position:      relative;
    display:       block;
    margin-top:    floor(calc($line-height-base / 4));
    margin-bottom: floor(calc($line-height-base / 4));
    min-height:    $line-height-base;

    label {
        min-height:    $line-height-base; // Ensure the input doesn't jump when there is no text
        padding-left:  20px;
        margin-bottom: 0;
        font-weight:   normal;
        cursor:        pointer;
    }
}

.radio input[type="radio"], .radio-inline input[type="radio"],
.checkbox input[type="checkbox"], .checkbox-inline input[type="checkbox"] {
    position:    absolute;
    margin-left: -20px;
    margin-top:  6px;
}

.radio + .radio, .checkbox + .checkbox {
    margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline, .checkbox-inline {
    position:       relative;
    display:        inline-block;
    padding-left:   20px;
    margin-bottom:  0;
    vertical-align: middle;
    font-weight:    normal;
    cursor:         pointer;
}

.radio-inline + .radio-inline, .checkbox-inline + .checkbox-inline {
    margin-top:  0;
    margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"], input[type="checkbox"] {

    &[disabled], &.disabled, fieldset[disabled] & {
        cursor: $cursor-disabled;
    }
}

// These classes are used directly on <label>s
.radio-inline, .checkbox-inline {

    &.disabled, fieldset[disabled] & {
        cursor: $cursor-disabled;
    }
}

// These classes are used on elements with <label> descendants
.radio, .checkbox {

    &.disabled, fieldset[disabled] & {
        label {
            cursor: $cursor-disabled;
        }
    }
}
